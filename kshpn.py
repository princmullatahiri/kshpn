# -*- coding: utf-8 -*-
"""kshpn

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OLe30vJi1d2fXAEqJR9ZxGzh2Ik-c5bH
"""

# pip install jupyter_dash

from __future__ import division
from jupyter_dash import JupyterDash
import dash_core_components as dcc
import dash_html_components as html
import pandas as pd
import plotly.graph_objs as go
from dash.dependencies import Input, Output
import logging
from datetime import datetime as dt
import numpy as np

log_fmt = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
logging.basicConfig(level=logging.INFO, format=log_fmt)

df = pd.read_csv('kshpnxenesit.csv')
df['Klasa'] = df['Klasa'].astype(str)

komunat = list(df['Komuna'].unique())
shkolla = list(df['Shkollë'].unique())
profili = list(df['Profili'].unique())

komunat_options = [
    {"label": str(komunat[i]), "value": str(komunat[i])}
    for i in range(len(komunat))
]
komunat_options.append({'label':'Të gjitha', 'value':'All'})

shkolla_options = [
    {"label": str(shkolla[i]), "value": str(shkolla[i])}
    for i in range(len(shkolla))
]
shkolla_options.append({'label':'Të gjitha', 'value':'All'})


profili_options = [
    {"label": str(profili[i]), "value": str(profili[i])}
    for i in range(len(profili))
]

profili_options.append({'label':'Të gjitha', 'value':'All'})
numerics = ['int16', 'int32', 'int64', 'float16', 'float32', 'float64']

profile_type = [
    {"label": str(profili[i]), "value": str(profili[i])}
    for i in range(len(profili))
]


komuna_type = [
    {"label": str(komunat[i]), "value": str(komunat[i])}
    for i in range(len(komunat))
]

app = JupyterDash()
app.layout = html.Div(
    [
        dcc.Store(id="aggregate_data"),
        # empty Div to trigger javascript file for graph resizing
        html.Div(id="output-clientside"),
        html.Div(
            [
                html.Div(
                    [
                        html.Div(
                            [
                                html.H3(
                                    "Komuna Shkolla Profili Nxënësit",
                                    style={"margin-bottom": "0px"},
                                ),html.H5(
                                    "Vjosa Mullatahiri", style={"margin-top": "0px"}
                                ),
                            ]
                        )
                    ],
                    className="twelve column",
                    id="title",
                )
            ],
            id="header",
            className="row flex-display",
            style={"margin-bottom": "25px"},
        ),
        html.Div(
            [
                html.Div(
                    [
                        
                        html.P("Zgjedhni Komunën:", className="control_label"),
                        dcc.Dropdown(
                            id="komunat_options",
                            options=komunat_options,
                            multi=True,
                            value='All',
                            className="dcc_control",
                        ),

                        html.P("Zgjedhni Shkollën:", className="control_label"),
                        dcc.Dropdown(
                            id="shkolla_options",
                            options=shkolla_options,
                            multi=True,
                            value='All',
                            className="dcc_control",
                        ),
                     
                     html.P("Zgjedhni Profilin:", className="control_label"),
                        dcc.Dropdown(
                            id="profili_options",
                            options=profili_options,
                            multi=True,
                            value='All',
                            className="dcc_control",
                        ),
                     html.P("Zgjedhni Vitin:", className="control_label"),
                        dcc.Dropdown(
                            id="viti_options",
                            options=[{'label':'2017-18', 'value':'2017-18'},
                                     {'label':'2018-19', 'value':'2018-19'},
                                     {'label':'2019-20', 'value':'2019-20'},
                                     {'label':'2020-21', 'value':'2020-21'},
                                     {'label':'Të gjitha', 'value':'All'}
                                     ],
                            multi=True,
                            value='All',
                            className="dcc_control",
                        ),
                     html.P("Zgjedhni Klasën:", className="control_label"),
                        dcc.Dropdown(
                            id="klasa_options",
                            options=[{'label':'10', 'value':'10'},
                                     {'label':'11', 'value':'11'},
                                     {'label':'12', 'value':'12'},
                                     {'label':'13', 'value':'13'},
                                     {'label':'Të gjitha', 'value':'All'}
                                     ],
                            multi=True,
                            value='All',
                            className="dcc_control",
                        ),
                     
                     html.P("Caktoni Gjininë:", className="control_label"),
                        dcc.Dropdown(
                            id="gjinia_options",
                            options=[{'label':'Mashkull', 'value':'Mashkull'},
                                     {'label':'Femër', 'value':'Femër'},
                                     {'label':'Të gjitha', 'value':'All'}
                                     ],
                            multi=True,
                            value='All',
                            className="dcc_control",
                        ),
                        
                    ],
                    className="pretty_container four columns",
                    id="cross-filter-options",
                ),
                html.Div(
                    [
                        html.Div(
                            [
                                html.Div(
                                    [html.H6(id="nr_total_nxensve"), html.P("Nr. i studentave total")],
                                    id="wells",
                                    className="mini_container",
                                ),
                                html.Div(
                                    [html.H6(id="nr_total_nxensve_djem"), html.P("Nr. i studentave djem")],
                                    id="gas",
                                    className="mini_container",
                                ),
                                html.Div(
                                    [html.H6(id="nr_total_nxensve_vajza"), html.P("Nr. i studenteve femra")],
                                    id="oil",
                                    className="mini_container",
                                )
                            ],
                            id="info-container",
                            className="row container-display",
                        ),
                        html.Div(
                            [html.P("Graph to show:", className="control_label"),
                              dcc.RadioItems(
                            id="main_insight_graph_radio_items",
                            options=[
                                {"label": "Barplot", "value": "bar"},
                                {"label": "Show Trend", "value": "trend"},
                            ],
                            value="bar",
                            labelStyle={"display": "inline-block"},
                            className="dcc_control",),

                             dcc.Graph(id="main_graph")],
                            id="countGraphContainer",
                            className="pretty_container",
                        ),
                    ],
                    id="right-column",
                    className="eight columns",
                ),
            ],
            className="row flex-display",
        ),
        html.Div(
            [
                html.Div(
                    [
                    html.P("Graph to show:", className="control_label"),
                              dcc.RadioItems(
                            id="first_insight_graph_radio_items",
                            options=[
                                {"label": "Barplot", "value": "bar"},
                                {"label": "Show Trend", "value": "trend"},
                            ],
                            value="bar",
                            labelStyle={"display": "inline-block"},
                            className="dcc_control",),
                    dcc.Graph(id="first_insight"),
                    ],
                    className="pretty_container seven columns",
                ),
                html.Div(
                    [  html.P("Graph to show:", className="control_label"),
                              dcc.RadioItems(
                            id="third_insight_graph_radio_items",
                            options=[
                                {"label": "Barplot", "value": "bar"},
                                {"label": "Show Trend", "value": "trend"},
                            ],
                            value="bar",
                            labelStyle={"display": "inline-block"},
                            className="dcc_control",),
                        dcc.Graph(id="third_insight")],
                    className="pretty_container seven columns",
                ),

            ],
            className="row flex-display",
        ),
     
     html.Div(
            [
                html.Div(
                    [   
                     dcc.Dropdown(
                            id="profile_type",
                            options=profile_type,
                            multi=True,
                            value=['Shoqëror', 'Shkenca Natyrore'],
                            className="dcc_control",
                        ),                           
                    dcc.Graph(id="forth_insight"),
                     
                    ],
                    className="pretty_container seven columns",
                ),
             
             html.Div(
                    [   
                     dcc.Dropdown(
                            id="komuna_type",
                            options=komuna_type,
                            multi=True,
                            value=['Gjakovë', 'Viti'],
                            className="dcc_control",
                        ),                           
                    dcc.Graph(id="fifth_insight"),
                    ],
                    className="pretty_container seven columns",
                ),

            ],
            className="row flex-display",
        ),
     

     html.Div(
            [
                html.Div(
                    [                            
                    dcc.Graph(id="sixth_insight"),
                    ],
                    className="pretty_container eight columns",
                ),

            ],
            className="row flex-display",
        ),


    ],
    id="mainContainer",
    style={"display": "flex", "flex-direction": "column"},

)

def filter_dataframe(df, komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options):
  dff = df
  if komunat_options is not None:
    if (komunat_options != 'All')  & (len(komunat_options) != 0) & (komunat_options != ['All']) :
      if (type(komunat_options) != list) & (len(komunat_options) != 0):
        komunat_options = [komunat_options]
      dff = dff[dff['Komuna'].isin(komunat_options)]


  if shkolla_options is not None:
    if (shkolla_options != 'All') & (len(shkolla_options) != 0) & (shkolla_options != ['All']):
      if (type(shkolla_options) != list) & (len(shkolla_options) != 0):
        shkolla_options = [shkolla_options]
      dff = dff[dff['Shkollë'].isin(shkolla_options)]

  if profili_options is not None:
    if (profili_options != 'All') &  (len(profili_options) != 0)& (profili_options != ['All']):
      if (type(profili_options) != list) & (len(profili_options) != 0)& (shkolla_options != ['All']):
        profili_options = [profili_options]
      dff = dff[dff['Profili'].isin(profili_options)]

  if viti_options is not None:
    if (viti_options != 'All') & (len(viti_options) != 0):
      if (type(viti_options) != list) & (len(viti_options) != 0)& (viti_options != ['All']):
        viti_options = [viti_options]
      dff = dff[dff['Viti'].isin(viti_options)]

  if klasa_options is not None:
    if (klasa_options != 'All') &  (len(klasa_options) != 0)& (klasa_options != ['All']):
      if (type(klasa_options) != list) & (len(klasa_options) != 0):
        klasa_options = [klasa_options]
      dff = dff[dff['Klasa'].isin(klasa_options)]

  if gjinia_options is not None:
    if (gjinia_options != 'All') & (len(gjinia_options) != 0)& (gjinia_options != ['All']):
      if (type(gjinia_options) != list) & (len(gjinia_options) != 0):
        gjinia_options = [gjinia_options]
      dff = dff[dff['Gjinia'].isin(gjinia_options)]
  return dff

@app.callback(
    Output("nr_total_nxensve", "children"),
    [
        Input("komunat_options", "value"),
        Input("shkolla_options", "value"),
        Input("profili_options", "value"),
        Input("viti_options", "value"),
        Input("klasa_options", "value"),
        Input("gjinia_options", "value"),
    ],
)
def nr_total_nxensve(komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options):
    dff = filter_dataframe(df, komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options)
    # return str(komunat_options)
    if len(dff) > 0:
      return dff[['Total']].sum().sum()
    else:
      return 0

@app.callback(
    Output("nr_total_nxensve_djem", "children"),
    [
        Input("komunat_options", "value"),
        Input("shkolla_options", "value"),
        Input("profili_options", "value"),
        Input("viti_options", "value"),
        Input("klasa_options", "value"),
        Input("gjinia_options", "value"),
    ],
)
def nr_total_nxensve_djem(komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options):
    dff = filter_dataframe(df, komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options)
    dff = dff[dff['Gjinia'] == 'Mashkull']
    if len(dff) > 0:
      return dff[['Total']].sum().sum()
    else:
      return 0


@app.callback(
    Output("nr_total_nxensve_vajza", "children"),
    [
        Input("komunat_options", "value"),
        Input("shkolla_options", "value"),
        Input("profili_options", "value"),
        Input("viti_options", "value"),
        Input("klasa_options", "value"),
        Input("gjinia_options", "value"),
    ],
)
def nr_total_nxensve_vajza(komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options):
    dff = filter_dataframe(df, komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options)
    dff = dff[dff['Gjinia'] == 'Femër']
    if len(dff) > 0:
      return dff[['Total']].sum().sum()
    else:
      return 0

@app.callback(
    Output("main_graph", "figure"),
    [
        Input("komunat_options", "value"),
        Input("shkolla_options", "value"),
        Input("profili_options", "value"),
        Input("viti_options", "value"),
        Input("klasa_options", "value"),
        Input("gjinia_options", "value"),
        Input("main_insight_graph_radio_items", "value")
    ],
)
def main_graph(komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options, main_insight_graph_radio_items):
    dff = filter_dataframe(df, komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options)

    data = []

    dff_profile_toget = dff.groupby(['Profili'], as_index=False).sum().sort_values([ 'Total' ], ascending=False)
    dff_grouped = dff.groupby(['Profili', 'Gjinia'], as_index=False, sort=False).sum()

    df_fin = pd.merge(dff_profile_toget, dff_grouped, on="Profili").sort_values([ 'Total_x' ], ascending=False)
    
    dff_femer = df_fin[df_fin['Gjinia'] == 'Femër']
    dff_mashkull = df_fin[df_fin['Gjinia'] == 'Mashkull']

    if main_insight_graph_radio_items == 'bar':
      bar_chart_plt = go.Bar(x=dff_femer['Profili'], y=dff_femer['Total_y'].astype(float) ,name='Femra')
      data.append(bar_chart_plt)

      bar_chart_plt = go.Bar(x=dff_mashkull['Profili'], y=dff_mashkull['Total_y'].astype(float) ,name='Mashkuj')
      data.append(bar_chart_plt)
    else:
      bar_chart_plt = go.Scatter(x=dff_femer['Profili'], y=dff_femer['Total_y'].astype(float),mode='lines+markers',name='Femra',
                                  hovertemplate=
                                       '<b>Klasa: %{x}</b>' +
                                      # '<br>Rënia: <i>%{text}</i> %<br>' +
                                        '<br>Gjinia: <i>Femër</i> <br>' +
                                       'Total: %{y:.0f}<extra></extra>')
      data.append(bar_chart_plt)

      bar_chart_plt = go.Scatter(x=dff_mashkull['Profili'], y=dff_mashkull['Total_y'].astype(float),mode='lines+markers',name='Mashkuj',
                                  hovertemplate=
                                       '<b>Klasa: %{x}</b>' +
                                       #'<br>Rënia: <i>%{text}</i> %<br>' +
                                        '<br>Gjinia: <i>Mashkull</i> <br>' +
                                       'Total: %{y:.0f}<extra></extra>')
      data.append(bar_chart_plt)


    first_insight_layout = {"title": "Nr. studentave sipas profileve",
                            "xaxis": {
                                "rangeslider" : {"visible" : True},
                                "type" : "category",
                                "tickfont" : {'family': 'PT Sans Narrpw', 'size': 12},
                                "tickangle" : 30
                            }
                            }



    figure = dict(data=data, layout=first_insight_layout)

    # figure.update_layout(xaxis=dict(rangeslider=dict(visible=True),
    #                          type="category"))

    return figure
    
    
    




@app.callback(
    Output("first_insight", "figure"),
    [
        Input("komunat_options", "value"),
        Input("shkolla_options", "value"),
        Input("profili_options", "value"),
        Input("viti_options", "value"),
        Input("klasa_options", "value"),
        Input("gjinia_options", "value"),
        Input("first_insight_graph_radio_items", "value")
    ],
)
def first_insight(komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options, first_insight_graph_radio_items):
    dff = filter_dataframe(df, komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options)

    data = []
    dff_grouped = dff.groupby(['Viti', 'Gjinia'], as_index=False).sum()


    dff_femer = dff_grouped[dff_grouped['Gjinia'] == 'Femër']
    dff_femer['Renia'] = round(-dff_femer['Total'].diff()*100/(dff_femer['Total']-dff_femer['Total'].diff()),2)
    dff_femer = dff_femer.fillna(0)


    dff_mashkull = dff_grouped[dff_grouped['Gjinia'] == 'Mashkull']
    dff_mashkull['Renia'] = round(-dff_mashkull['Total'].diff()*100/(dff_mashkull['Total']-dff_mashkull['Total'].diff()),2)
    dff_mashkull = dff_mashkull.fillna(0)
    

    if first_insight_graph_radio_items == 'bar': 
      bar_chart_plt = go.Bar(x=dff_femer['Viti'], y=dff_femer['Total'].astype(float),name='Femra')
      data.append(bar_chart_plt)

      bar_chart_plt = go.Bar(x=dff_mashkull['Viti'], y=dff_mashkull['Total'].astype(float), name='Mashkuj')
      data.append(bar_chart_plt)
    else:
      bar_chart_plt = go.Scatter(x=dff_femer['Viti'], y=dff_femer['Total'].astype(float),mode='lines+markers',name='Femra',
                                 text = list(dff_femer.Renia), hovertemplate=
                                       '<b>Klasa: %{x}</b>' +
                                       '<br>Rënia: <i>%{text}</i> %<br>' +
                                        '<br>Gjinia: <i>Femër</i><br>' +
                                       'Total: %{y:.0f}<extra></extra>')
      data.append(bar_chart_plt)

      bar_chart_plt = go.Scatter(x=dff_mashkull['Viti'], y=dff_mashkull['Total'].astype(float),mode='lines+markers',name='Mashkuj',
                                 text = list(dff_mashkull.Renia), hovertemplate=
                                       '<b>Klasa: %{x}</b>' +
                                       '<br>Rënia: <i>%{text}</i> %<br>' +
                                        '<br>Gjinia: <i>Mashkull</i><br>' +
                                       'Total: %{y:.0f}<extra></extra>')
      data.append(bar_chart_plt)


    first_insight_layout = {"title": "Nr. studentave sipas viteve", "geo": dict(showcountries=True)}



    figure = dict(data=data, layout=first_insight_layout)
    return figure




@app.callback(
    Output("third_insight", "figure"),
    [
        Input("komunat_options", "value"),
        Input("shkolla_options", "value"),
        Input("profili_options", "value"),
        Input("viti_options", "value"),
        Input("klasa_options", "value"),
        Input("gjinia_options", "value"),
        Input("third_insight_graph_radio_items", "value")

    ],
)
def third_insight(komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options, third_insight_graph_radio_items):
    dff = filter_dataframe(df, komunat_options, shkolla_options, profili_options, viti_options, klasa_options, gjinia_options)

    data = []
    dff_grouped = dff.groupby(['Klasa', 'Gjinia'], as_index=False).sum()


    dff_femer = dff_grouped[dff_grouped['Gjinia'] == 'Femër']

    dff_mashkull = dff_grouped[dff_grouped['Gjinia'] == 'Mashkull']

    if third_insight_graph_radio_items == 'bar':
      bar_chart_plt = go.Bar(x=dff_femer['Klasa'], y=dff_femer['Total'].astype(float),name='Femra')
      data.append(bar_chart_plt)

      bar_chart_plt = go.Bar(x=dff_mashkull['Klasa'], y=dff_mashkull['Total'].astype(float), name='Mashkuj')
      data.append(bar_chart_plt)
    else:
      bar_chart_plt = go.Scatter(x=dff_femer['Klasa'], y=dff_femer['Total'].astype(float),mode='lines+markers',name='Femra',
                                  hovertemplate=
                                       '<b>Klasa: %{x}</b>' +
                                       #'<br>Rënia: <i>%{text}</i> %<br>' +
                                        '<br>Gjinia: <i>Femër</i><br>' +
                                       'Total: %{y:.0f}<extra></extra>')
      data.append(bar_chart_plt)

      bar_chart_plt = go.Scatter(x=dff_mashkull['Klasa'], y=dff_mashkull['Total'].astype(float),mode='lines+markers',name='Mashkuj',
                                  hovertemplate=
                                       '<b>Klasa: %{x}</b>' +
                                       #'<br>Rënia: <i>%{text}</i> %<br>' +
                                        '<br>Gjinia: <i>Mashkull</i><br>' +
                                       'Total: %{y:.0f}<extra></extra>')
      data.append(bar_chart_plt)


    first_insight_layout = {"title": "Nr. studentave sipas klaseve", "geo": dict(showcountries=True)}



    figure = dict(data=data, layout=first_insight_layout)
    return figure



@app.callback(
    Output("forth_insight", "figure"),
    [
        Input("klasa_options", "value"),
        Input("profile_type", "value"),
        Input("komunat_options", "value"),
        Input("gjinia_options", "value"),

    ],
)
def forth_insight(klasa_options, profile_type, komuna_type, gjinia_options):
    data = []

    for prof in profile_type:
      dff = filter_dataframe(df, komuna_type, None, prof, None, klasa_options, gjinia_options)

      dff_grouped = dff.groupby(['Viti'], as_index=False).sum()

      dff_grouped['Renia'] = round(-dff_grouped['Total'].diff()*100/(dff_grouped['Total']-dff_grouped['Total'].diff()),2)
      dff_grouped = dff_grouped.fillna(0)
    
      bar_chart_plt = go.Scatter(x=dff_grouped['Viti'], y=dff_grouped['Total'].astype(float),mode='lines+markers',name=prof,
                                 text = list(dff_grouped.Renia), hovertemplate=
                                       '<b>Viti: %{x}</b>' +
                                       '<br>Rënia: <i>%{text}</i> %<br>' +
                                       'Total: %{y:.0f}<extra></extra>')
      data.append(bar_chart_plt)


    first_insight_layout = {"title": "Nr. studentave sipas viteve dhe profileve"}



    figure = dict(data=data, layout=first_insight_layout)
    return figure



@app.callback(
    Output("fifth_insight", "figure"),
    [
        Input("klasa_options", "value"),
        Input("komuna_type", "value"),
        Input("profili_options", "value"),
        Input("gjinia_options", "value"),
     

    ],
)
def fifth_insight(klasa_options, komuna_type, profili_options, gjinia_options):
    data = []

    for komuna in komuna_type:
      dff = filter_dataframe(df, komuna, None, profili_options, None, klasa_options, gjinia_options)

      dff_grouped = dff.groupby(['Viti'], as_index=False).sum()
    
      dff_grouped['Renia'] = round(-dff_grouped['Total'].diff()*100/(dff_grouped['Total']-dff_grouped['Total'].diff()),2)
      dff_grouped = dff_grouped.fillna(0)

      bar_chart_plt = go.Scatter(x=dff_grouped['Viti'], y=dff_grouped['Total'].astype(float),mode='lines+markers',name=komuna,
                                 text = list(dff_grouped.Renia), hovertemplate=
                                       '<b>Viti: %{x}</b>' +
                                       '<br>Rënia: <i>%{text}</i> %<br>' +
                                       'Total: %{y:.0f}<extra></extra>')
      data.append(bar_chart_plt)


    first_insight_layout = {"title": "Nr. studentave sipas viteve dhe komunave"}



    figure = dict(data=data, layout=first_insight_layout)
    return figure




@app.callback(
    Output("sixth_insight", "figure"),
    [
        Input("komunat_options", "value"),
        Input("shkolla_options", "value"),
        Input("profili_options", "value"),
        Input("gjinia_options", "value"),

    ],
)
def sixth_insight(komunat_options, shkolla_options, profili_options, gjinia_options):
    dff = filter_dataframe(df, komunat_options, shkolla_options, profili_options, None, None, gjinia_options)
    
    data = []

    dff_grouped = dff.groupby(['Viti', 'Klasa'], as_index=False).sum()
    dff_grouped = dff_grouped[dff_grouped.Klasa != '13']
    dff_grouped = dff_grouped.fillna(0)

    first_line = dff_grouped.iloc[::4, :]
    first_line['Renia'] = round(-first_line['Total'].diff()*100/(first_line['Total']-first_line['Total'].diff()),2)
    first_line = first_line.fillna(0)

    second_line = dff_grouped.iloc[1::4, :].head(2)
    second_line['Renia'] = round(-second_line['Total'].diff()*100/(second_line['Total']-second_line['Total'].diff()),2)
    second_line = second_line.fillna(0)


    third_line = dff_grouped.iloc[3::4, :]
    third_line['Renia'] = round(-third_line['Total'].diff()*100/(third_line['Total']-third_line['Total'].diff()),2)
    third_line = third_line.fillna(0)


    forth_line = dff_grouped.iloc[6::4, :]
    forth_line['Renia'] = round(-forth_line['Total'].diff()*100/(forth_line['Total']-forth_line['Total'].diff()),2)
    forth_line = forth_line.fillna(0)



    
    
    bar_chart_plt = go.Scatter(x=first_line['Viti'], y=first_line['Total'].astype(float),mode='lines+markers',name='10/2017-18',
                               text = list(first_line.Klasa), hovertext = list(first_line['Renia']),
                               hovertemplate=
                                       '<b>Viti: %{x}</b>' +
                                       '<br>Klasa: <i>%{text}</i><br>' +
                                       '<br>Rënia: <i>%{hovertext}</i> %<br>' +
                                       'Total: %{y:.0f}<extra></extra>')
    data.append(bar_chart_plt)

    bar_chart_plt = go.Scatter(x=second_line['Viti'], y=second_line['Total'].astype(float),mode='lines+markers',name='11/2017-18',
                               text = list(second_line.Klasa), hovertext = list(second_line['Renia']),
                               hovertemplate=
                                       '<b>Viti: %{x}</b>' +
                                       '<br>Klasa: <i>%{text}</i><br>' +
                                       '<br>Rënia: <i>%{hovertext}</i> %<br>' +
                                       'Total: %{y:.0f}<extra></extra>')
    data.append(bar_chart_plt)

    bar_chart_plt = go.Scatter(x=third_line['Viti'], y=third_line['Total'].astype(float),mode='lines+markers',name='10/2018-19',
                               text = list(third_line.Klasa), hovertext = list(third_line['Renia']),
                               hovertemplate=
                                       '<b>Viti: %{x}</b>' +
                                       '<br>Klasa: <i>%{text}</i><br>' +
                                       '<br>Rënia: <i>%{hovertext}</i> %<br>' +
                                       'Total: %{y:.0f}<extra></extra>')
    data.append(bar_chart_plt)

    bar_chart_plt = go.Scatter(x=forth_line['Viti'], y=forth_line['Total'].astype(float),mode='lines+markers',name='10/2019-20',
                               text = list(forth_line.Klasa), hovertext = list(forth_line['Renia']),
                               hovertemplate=
                                       '<b>Viti: %{x}</b>' +
                                       '<br>Klasa: <i>%{text}</i><br>' +
                                       '<br>Rënia: <i>%{hovertext}</i> %<br>' +
                                       'Total: %{y:.0f}<extra></extra>')
    data.append(bar_chart_plt)


    first_insight_layout = {"title": "Nr. studentave sipas viteve dhe klaseve"}



    figure = dict(data=data, layout=first_insight_layout)
    return figure

@app.callback(
    [Output("shkolla_options", "options"),
     Output("shkolla_options", "value"),
     Output("shkolla_options", "multi"),
     ],
    [
        Input("komunat_options", "value"),
    ],
)
def nr_total_nxensve_vajza(komunat_options):

    
    dff = filter_dataframe(df, komunat_options, None, None, None, None, None)

    shkolla = list(dff['Shkollë'].unique())

    shkolla_options = [
      {"label": str(shkolla[i]), "value": str(shkolla[i])}
      for i in range(len(shkolla))
    ] 
    shkolla_options.append({'label':'Të gjitha', 'value':'All'})



    return shkolla_options, 'All', True


@app.callback(
    [Output("profili_options", "options"),
     Output("profili_options", "value"),
     Output("profili_options", "multi"),
     ],
    [
        Input("komunat_options", "value"),
        Input("shkolla_options", "value")
    ],
)
def nr_total_nxensve_vajza(komunat_options, shkolla_options):
   
    dff = filter_dataframe(df, komunat_options, shkolla_options, None, None, None, None)

    profili = list(dff['Profili'].unique())

    profili_options = [
      {"label": str(profili[i]), "value": str(profili[i])}
      for i in range(len(profili))
    ]
    profili_options.append({'label':'Të gjitha', 'value':'All'})



    return profili_options, 'All', True

# app._terminate_server_for_port("localhost", 8050)

if __name__=="__main__":
     app.run_server(debug=False, port=8060)